name: Lighthouse Testing and README Update

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  lighthouse-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g @lhci/cli@0.13.x

      - name: Run Lighthouse tests
        run: |
          mkdir -p lighthouse-results
          
          lhci collect --url=https://dineth-lochana.github.io/GreenTechUOB/#/ --output=json --outputPath=./lighthouse-results/home.json
          lhci collect --url=https://dineth-lochana.github.io/GreenTechUOB/#/Learn --output=json --outputPath=./lighthouse-results/learn.json
          lhci collect --url=https://dineth-lochana.github.io/GreenTechUOB/#/fireSafety --output=json --outputPath=./lighthouse-results/fire-safety.json
          lhci collect --url=https://dineth-lochana.github.io/GreenTechUOB/#/variableDrives --output=json --outputPath=./lighthouse-results/variable-drives.json

      - name: Process Lighthouse Results and Update README
        run: |
          cat << 'EOF' > process-lighthouse.js
          const fs = require('fs');
          
          function readLighthouseResults(filePath) {
              const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
              const categories = data[0].lhr.categories;
              return {
                  performance: Math.round(categories.performance.score * 100),
                  accessibility: Math.round(categories.accessibility.score * 100),
                  'best-practices': Math.round(categories['best-practices'].score * 100),
                  seo: Math.round(categories.seo.score * 100)
              };
          }
          
          function generateMarkdownTable(results) {
              const timestamp = new Date().toISOString().split('T')[0];
              let markdown = '## Dineth LightHouse Test\n\n';
              markdown += `Last updated: ${timestamp}\n\n`;
              markdown += '| Page | Performance | Accessibility | Best Practices | SEO |\n';
              markdown += '|------|-------------|---------------|----------------|-----|\n';
          
              for (const [page, scores] of Object.entries(results)) {
                  markdown += `| ${page} | ${scores.performance} | ${scores.accessibility} | ${scores['best-practices']} | ${scores.seo} |\n`;
              }
              
              return markdown;
          }
          
          const results = {
              'Home': readLighthouseResults('./lighthouse-results/home.json'),
              'Learn': readLighthouseResults('./lighthouse-results/learn.json'),
              'Fire Safety': readLighthouseResults('./lighthouse-results/fire-safety.json'),
              'Variable Drives': readLighthouseResults('./lighthouse-results/variable-drives.json')
          };
          
          const lighthouseSection = generateMarkdownTable(results);
          
          let readme = fs.readFileSync('README.md', 'utf8');
          
          const lighthouseRegex = /## Dineth LightHouse Test[\s\S]*?(?=##|$)/;
          
          if (lighthouseRegex.test(readme)) {
              readme = readme.replace(lighthouseRegex, lighthouseSection);
          } else {
              readme += '\n\n' + lighthouseSection;
          }
          
          fs.writeFileSync('README.md', readme);
          EOF
          
          node process-lighthouse.js

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add README.md
          git commit -m "docs: update Lighthouse scores [skip ci]" || exit 0
          git push
